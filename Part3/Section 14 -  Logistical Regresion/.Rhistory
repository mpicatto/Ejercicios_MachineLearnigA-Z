setwd("~/Documentos/UDEMY/ML A-Z/Part3/Section 14 -  Logistical Regresion")
df=read.csv('Social_Network_Ads.csv')
View(df)
View(df)
555555555555555555555555555555555555555555555555555555555555555555555
#filtrado de datasets (filas, columnas)
df=dataset[,3:5]
#filtrado de datasets (filas, columnas)
df=df[,3:5]
#Dividir los datos en entrenamiento y conjunto de test
#install.packages("caTools")
library(caTools)
set.seed(123)
sample=sample.split(df$Purchased, SplitRatio = 0.75)
training_set=subset(df, sample==TRUE)
testing_set=subset(df, sample==FALSE)
training_set[,1:2]=scale(training_set[,1:2])
testing_set[,1:2]=scale(testing_set[,1:2])
?glm
classifier = glm(formula = Purchased ~ .,
data = training_set,
family = binomial)
View(classifier)
#---------Realizar Predicción-----------
#prediccion de los resultados con el conjunto de testing
prob_pred=predict(classifier,
type="response",
newdata = testing_set[,-3])
prob_pred
y_pred=ifelse(prob_pred>0.5, 1, 0)
y_pred
#Matriz de confucción para evaluar eficiencia
cm=table(testing_set[,3],
y_pred)
cm
#------Crear Visualización de los datos-----------
# Visualización del conjunto de entrenamiento
install.packages("ElemStatLearn")
#------Crear Visualización de los datos-----------
# Visualización del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
#------Crear Visualización de los datos-----------
# Visualización del conjunto de entrenamiento
#install.packages("ElemStatLearn")
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Entrenamiento)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = testing_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Clasificación (Conjunto de Testing)',
xlab = 'Edad', ylab = 'Sueldo Estimado',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
