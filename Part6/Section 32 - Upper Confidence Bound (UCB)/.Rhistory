setwd("~/Documentos/UDEMY/ML A-Z/Part6/Section 32 - Upper Confidence Bound (UCB)")
df=read.csv('Ads_CTR_Optimisation.csv')
#Algoritmo UCB
d=10 #numero de anuncioas
N=10000 #número de casos
number_of_selections=integer(d)
sums_of_rewards=integer(d)
number_of_selections=integer(d)
sums_of_rewards=integer(d)
ads_selected=integer(0)
total_reward=0
for (n in 1:N ){
max_upper_bound=0
ad=0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward=sums_of_rewards[i]/number_of_selections[i]
delta_i=sqrt(3/2*log(n)/number_of_selections[i])
upper_bound=average_reward+delta_i
}
else{
upper_bound=1e400
}
if (upper_bound>max_upper_bound){
max_upper_bound=upper_bound
ad=i
}
}
ads_selected=append(ads_selected+ad)
number_of_selections[ad]=number_of_selections[ad]+1
reward=df[n,ad]
sums_of_rewards[ad]=sums_of_rewards[ad]+reward
total_reward=total_reward+reward
}
d
#Algoritmo UCB
d=10 #numero de anuncioas
N=10000 #número de casos
number_of_selections=integer(d)
sums_of_rewards=integer(d)
ads_selected=integer(0)
total_reward=0
for (n in 1:N ){
max_upper_bound=0
ad=0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward=sums_of_rewards[i]/number_of_selections[i]
delta_i=sqrt(3/2*log(n)/number_of_selections[i])
upper_bound=average_reward+delta_i
}
else{
upper_bound=1e400
}
if (upper_bound>max_upper_bound){
max_upper_bound=upper_bound
ad=i
}
}
ads_selected=append(ads_selected+ad)
number_of_selections[ad]=number_of_selections[ad]+1
reward=df[n,ad]
sums_of_rewards[ad]=sums_of_rewards[ad]+reward
total_reward=total_reward+reward
}
ads_selected
load("~/Documentos/UDEMY/ML A-Z/machinelearning-az-master/.RData")
df=read.csv('Ads_CTR_Optimisation.csv')
#Algoritmo UCB
d=10 #numero de anuncioas
N=10000 #número de casos
number_of_selections=integer(d)
sums_of_rewards=integer(d)
ads_selected=integer(0)
total_reward=0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward = sums_of_rewards[i] / number_of_selections[i]
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_of_selections[ad] = number_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
for(n in 1:N){
max_upper_bound = 0
ad = 0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward = sums_of_rewards[i] / number_of_selections[i]
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_of_selections[ad] = number_of_selections[ad] + 1
reward = df[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
#visualizacion de histograma
hist(ads_selected,
col = "lightblue",
main = "Histograma de los Anuncios",
xlab = "ID del Anuncio",
ylab = "Frecuencia absoluta del anuncio")
setwd("~/Documentos/UDEMY/ML A-Z/Part6/Section 32 - Upper Confidence Bound (UCB)")
