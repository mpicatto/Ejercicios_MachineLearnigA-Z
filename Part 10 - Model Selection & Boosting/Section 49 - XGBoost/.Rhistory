setwd("~/Documentos/UDEMY/ML A-Z/Part5/Section 28 - Apriori")
install.packages("arules")
#Importar Dataset
library(arules)
df=read.csv('Market_Basket_Optimisation.csv',header = FALSE)
# #filtrado de datasets (filas, columnas)
# df=df[,3:5]
#Crear Sparce Matrix
df=read.transactions("Market_Basket_Optimisation.csv",
sep = ",",
rm.duplicates = TRUE)
# Histograma de Transacciones
itemFrequencyPlot(df,topN=20)
#Entrenar Algoritmo con el Dataset
rules=apriori(data = df, parameter = list(support=0.004,confidence=0.2))
#Visualizacion de los resultados
inspect(sort(rules, by='lift')[1:10])
setwd("~/Documentos/UDEMY/ML A-Z/Part 10 - Model Selection & Boosting/Section 49 - XGBoost")
install.packages(c("caret", "caTools", "xgboost"))
# Importar el dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Codificar los factores para la RNA
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c("Female", "Male"),
labels = c(1,2)))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Ajustar XGBoost al Conjunto de Entrenamiento
#install.packages("xgboost")
library(xgboost)
classifier = xgboost(data = as.matrix(training_set[, -11]),
label = training_set$Exited,
nrounds = 10)
# Aplicar algoritmo de k-fold cross validation
# install.packages("caret")
library(caret)
folds = createFolds(training_set$Exited, k = 10)
# Aplicar algoritmo de k-fold cross validation
install.packages("caret")
# Aplicar algoritmo de k-fold cross validation
#install.packages("caret")
library(caret)
folds = createFolds(training_set$Exited, k = 10)
cv = lapply(folds, function(x) {
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = xgboost(data = as.matrix(training_set[, -11]),
label = training_set$Exited,
nrounds = 10)
y_pred = predict(classifier, newdata = as.matrix(test_fold[,-11]))
y_pred = (y_pred >= 0.5)
cm = table(test_fold[, 11], y_pred)
accuracy = (cm[1,1]+cm[2,2])/(cm[1,1]+cm[1,2]+cm[2,1]+cm[2,2])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
accuracy_sd = sd(as.numeric(cv))
